<?xml version="1.0" encoding="UTF-8"?>
<suppressions xmlns="https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.3.xsd">
  <suppress until="2023-03-31">
    <notes><![CDATA[
     Suppressing as it's a false positive (see: https://pivotal.io/security/cve-2018-1258)
   ]]></notes>
    <gav regex="true">^org\.springframework\.security:spring-security-crypto:5.4.[0-5]</gav>
    <cpe>cpe:/a:pivotal_software:spring_security</cpe>
    <cve>CVE-2018-1258</cve>
  </suppress>
  <suppress>
    <notes><![CDATA[
        CVE is a json vulnerability for Node projects. False positive reported at https://github.com/jeremylong/DependencyCheck/issues/2794
    ]]></notes>
    <cve>CVE-2020-10663</cve>
    <cve>CVE-2020-7712</cve>
  </suppress>


  <suppress until="2023-03-31">
    <notes><![CDATA[file name: spring-boot-starter-oauth2-client-2.5.5.jar, spring-boot-starter-oauth2-resource-server-2.5.5.jar]]></notes>
    <cve>CVE-2021-22112</cve>
  </suppress>


  <suppress until="2023-03-31">
    <notes>The CVE-2018-1258 occurs from spring security libraries, despite the latest versions are used. This is
      confirmed as false positive
      and hence it is suppressed (https://github.com/jeremylong/DependencyCheck/issues/2952).
      see (https://pivotal.io/security/cve-2018-1258)
    </notes>
    <cve>CVE-2018-1258</cve>
  </suppress>

  <suppress until="2023-03-31">
    <notes>Temporary suppressions
    </notes>
    <cve>CVE-2020-36518</cve>
    <cve>CVE-2022-0839</cve>
    <cve>CVE-2022-26520</cve>
    <cve>CVE-2022-21724</cve>
    <cve>CVE-2022-22965</cve>
    <cve>CVE-2022-22968</cve>
    <cve>CVE-2022-22971</cve>
    <cve>CVE-2022-22950</cve>
    <cve>CVE-2016-1000027</cve>
    <cve>CVE-2022-22970</cve>
    <cve>CVE-2022-22969</cve>
    <cve>CVE-2013-4152</cve>
    <cve>CVE-2013-7315</cve>
    <cve>CVE-2014-0054</cve>
    <cve>CVE-2022-29885</cve>
    <cve>CVE-2022-22976</cve>
    <cve>CVE-2022-41946</cve>
  </suppress>

  <!--  <suppress until="2023-03-31">-->
  <!--    <notes>-->
  <!--      The package org.yaml:snakeyaml from 0 and before 1.31 are vulnerable to-->
  <!--      Denial of Service (DoS) due missing to nested depth limitation for collections.-->
  <!--      snakeyaml v1.31 (most recent patch available currently) does not resolve the issue.-->
  <!--    </notes>-->
  <!--    <cve>CVE-2022-25857</cve>-->
  <!--    <cve>CVE-2022-38749</cve>-->
  <!--    <cve>CVE-2022-38750</cve>-->
  <!--    <cve>CVE-2022-38751</cve>-->
  <!--  </suppress>-->

  <suppress>
    <notes>Postgres JDBC version needs updating</notes>
    <cve>CVE-2022-31197</cve>
  </suppress>
  <suppress>
    <notes>Needs to be upgrading to Spring version 5+</notes>
    <cve>CVE-2018-11040</cve>
    <cve>CVE-2020-5421</cve>
    <cve>CVE-2018-1257</cve>
    <cve>CVE-2018-11039</cve>
  </suppress>
  <suppress>
    <notes>Apache tomcat version upgrade needed</notes>
    <cve>CVE-2022-34305</cve>
    <cve>CVE-2022-45143</cve>
  </suppress>
  <suppress>
    <notes>Spring security core upgraded needed</notes>
    <cve>CVE-2022-22978</cve>
  </suppress>

  <suppress>
    <notes>Postgres JDBC version needs updating</notes>
    <cve>CVE-2022-31197</cve>
  </suppress>
  <suppress>
    <notes>Needs to be upgrading to Spring version 5+</notes>
    <cve>CVE-2018-11040</cve>
    <cve>CVE-2020-5421</cve>
    <cve>CVE-2018-1257</cve>
    <cve>CVE-2018-11039</cve>
  </suppress>
  <suppress>
    <notes>Apache tomcat version upgrade needed</notes>
    <cve>CVE-2022-34305</cve>
  </suppress>
  <suppress>
    <notes>Spring security core upgraded needed</notes>
    <cve>CVE-2022-22978</cve>
  </suppress>

  <suppress>
    <notes>Spring security needs update to version 5.5.* or greater (major release)</notes>
    <cve>CVE-2022-31690</cve>
    <cve>CVE-2022-31692</cve>
  </suppress>
  <suppress>
    <notes>Jackson Databind needs update to version 2.13.* or greater (major release)</notes>
    <cve>CVE-2022-42003</cve>
    <cve>CVE-2022-42004</cve>
    <cve>CVE-2021-37533</cve>
  </suppress>
  <suppress>
    <notes>Prior to Apache Commons Net 3.9.0, Net's FTP client trusts the host from PASV response by default. A
      malicious server can redirect the Commons Net code to use a different host, but the user has to connect to
      the malicious server in the first place. This may lead to leakage of information about services running on
      the private network of the client. The default in version 3.9.0 is now false to ignore such hosts, as cURL
      does. See https://issues.apache.org/jira/browse/NET-711.
    </notes>
    <cve>CVE-2021-37533</cve>
  </suppress>
  <suppress>
    <cve>CVE-2021-37533</cve>
  </suppress>
  <suppress>
    <cve>CVE-2022-41946</cve>
  </suppress>
  <suppress>
    <cve>CVE-2021-37533</cve>
  </suppress>
  <suppress>
    <cve>CVE-2022-41946</cve>
  </suppress>
  <suppress>
    <cve>CVE-2021-4277</cve>
  </suppress>
  <suppress>
    <notes>Postgresql version needs upgrading to resolve CVE</notes>
    <cve>CVE-2022-41946</cve>
  </suppress>
  <suppress>
        <notes>Prior to Apache Commons Net 3.9.0, Net's FTP client trusts the host from PASV response by default. A
            malicious server can redirect the Commons Net code to use a different host, but the user has to connect to
            the malicious server in the first place. This may lead to leakage of information about services running on
            the private network of the client. The default in version 3.9.0 is now false to ignore such hosts, as cURL
            does. See https://issues.apache.org/jira/browse/NET-711.
        </notes>
        <cve>CVE-2021-37533</cve>
  </suppress>
  <suppress>
    <notes>
      In Apache Commons IO before 2.7, When invoking the method FileNameUtils.normalize with an improper input string,
      like "//../foo", or "\\..\foo", the result would be the same value
    </notes>
    <cve>CVE-2021-29425</cve>
  </suppress>
  <suppress>
    <notes>
      The package com.google.code.gson:gson before 2.8.9 are vulnerable to Deserialization of Untrusted Data via
      the writeReplace() method in internal classes, which may lead to DoS attacks
    </notes>
    <cve>CVE-2022-25647</cve>
  </suppress>
  <suppress>
    <notes>
      The package com.google.code.gson:gson before 2.8.9 are vulnerable to Deserialization of Untrusted Data via
      the writeReplace() method in internal classes, which may lead to DoS attacks
    </notes>
    <cve>CVE-2022-25647</cve>
  </suppress>
  <suppress>
    <notes>
      ** DISPUTED ** CertificatePinner.java in OkHttp 3.x through 3.12.0 allows man-in-the-middle attackers to bypass
      certificate pinning by changing SSLContext and the boolean values while hooking the application.
    </notes>
    <cve>CVE-2018-20200</cve>
  </suppress>
  <suppress>
    <notes>
      Apache HttpClient versions prior to version 4.5.13 and 5.0.3 can misinterpret malformed authority component
      in request URIs passed to the library as java.net.URI object and pick the wrong target host for request execution.
    </notes>
    <cve>CVE-2020-13956</cve>
  </suppress>
  <suppress>
    <notes>
      Due to unbounded alias chasing, a maliciously crafted YAML file can cause the system to consume significant
      system resources. If parsing user input, this may be used as a denial of service vector.
    </notes>
    <cve>CVE-2021-4235</cve>
    <cve>CVE-2022-3064</cve>
  </suppress>
  <suppress>
    <notes>
      The JsonErrorReportValve in Apache Tomcat 8.5.83, 9.0.40 to 9.0.68 and 10.1.0-M1 to 10.1.1 did not escape the type,
      message or description values. In some circumstances these are constructed from user provided data and it was
      therefore possible for users to supply values that invalidated or manipulated the JSON output.
    </notes>
    <cve>CVE-2022-45143</cve>
  </suppress>
  <suppress>
    <notes>A stack overflow in the XML.toJSONObject component of hutool-json v5.8.10
      allows attackers to cause a Denial of Service (DoS) via crafted JSON or XML data.
      New version of jackson-core needed to resolve this issue.
    </notes>
    <cve>CVE-2022-45688</cve>
  </suppress>
</suppressions>
