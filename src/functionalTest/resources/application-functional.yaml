management:
  endpoints:
    web:
      base-path: /

#If you use a database then uncomment below lines and update db properties accordingly
spring:
  main:
    allow-bean-definition-overriding: true
  application:
    name: notifications-service
  datasource:
    driver-class-name: org.testcontainers.jdbc.ContainerDatabaseDriver
    url: jdbc:tc:postgresql:11.0://localhost/features
  liquibase:
    enabled: ${SPRING_LIQUIBASE_ENABLED:true}
    change-log: classpath:/db/changelog/db.changelog-master.xml
  jackson.date-format: yyyy-MM-dd
  flyway.enabled: true
  jackson:
    mapper:
      accept-case-insensitive-enums: true
    deserialization:
      fail-on-unknown-properties: true
  security:
    oauth2:
      client:
        provider:
          oidc:
            issuer-uri: https://idam-web-public.aat.platform.hmcts.net/o
        # Dummy OIDC client required even we are not going to use
        registration:
          oidc:
            client-id: paybubble
            client-secret: ${OIDC_CLIENT_SECRET}
      resource:
        filter-order: 3
oidc:
  audience-list: paybubble
  issuer: ${OIDC_ISSUER:https://forgerock-am.service.core-compute-idam-aat.internal:8443/openam/oauth2/hmcts}

auth:
  provider:
    service:
      client:
        baseUrl: http://rpe-service-auth-provider-aat.service.core-compute-aat.internal
  idam:
    client:
      baseUrl: https://idam-api.aat.platform.hmcts.net
test:
  url :
    notification : ${TEST_URL:http://localhost:8080}
    refunds : ${TEST_URL_REFUND:http://ccpay-refunds-api-pr-211.service.core-compute-preview.internal}
    payments : ${TEST_URL_PAYMENT:http://payment-api-pr-1089.service.core-compute-preview.internal}
  user:
    password: ${TEST_USER_PASSWORD:password123Notif}

idam:
  api:
    url: ${IDAM_API_URL:https://idam-api.aat.platform.hmcts.net}
  s2s-authorised:
    services: ccpay_bubble,internal,payment_app
  s2s-auth:
    url: http://rpe-service-auth-provider-aat.service.core-compute-aat.internal
    totp_secret: ${OIDC_S2S_SECRET:}
    microservice: ccpay_bubble
  paybubble:
    client:
      id: ${IDAM_PAYBUBBLE_CLIENT_ID:paybubble}
      secret: ${IDAM_PAYBUBBLE_CLIENT_SECRET:NVYEC2X7XFSRENTU}
oauth2:
  redirect:
    uri: ${OAUTH2_REDIRECT_URI:https://moneyclaims.aat.platform.hmcts.net}
  client:
    id: ${REFUND_SERVICE_ACCOUNT_CLIENT_ID:refunds_api}
    secret: ${REFUND_SERVICE_ACCOUNT_CLIENT_SECRET}
s2s:
  url: ${S2S_URL:http://rpe-service-auth-provider-aat.service.core-compute-aat.internal}
  service :
    refunds:
      name: ${S2S_SERVICE_NAME_PAYBUBBLE:ccpay_bubble}
      secret: ${S2S_SERVICE_SECRET_PAYBUBBLE}

azure:
  application-insights:
    instrumentation-key: ${APPINSIGHTS_INSTRUMENTATIONKEY:}
generated:
  user:
    email:
      pattern: ${GENERATED_USER_EMAIL_PATTERN:freg-test-functional-aldie-notif-user-%s@feemail.com}
payments:
  account:
    existing:
      account:
        number : PBAFUNC12345
    fake:
      account:
        number : QWERTYUIOP
notification:
  url: ${NOTIFICATION_API_URL:http://localhost:4300}
  letter-path: ${NOTIFICATION_LETTER_PATH:/letter}
  email-path: ${NOTIFICATION_EMAIL_PATH:/email}
  email-to-reply: ${EMAIL_TO_REPLY:}
  service-mailbox: ${SERVICE_MAIL_BOX:}
  service-url: ${SERVICE_URL:http://service}
notify:
  letter.template: ${NOTIFICATION_LETTER_TEMPLATE_ID:dummy}
  email.template: ${NOTIFICATION_EMAIL_TEMPLATE_ID:dummy}
  template:
    cheque-po-cash:
      letter: ${NOTIFICATIONS_LETTER_CHEQUE_PO_CASH_TEMPLATE_ID:}
      email: ${NOTIFICATIONS_EMAIL_CHEQUE_PO_CASH_TEMPLATE_ID:}
    card-pba:
      letter: ${NOTIFICATION_LETTER_CARD_PBA_TEMPLATE_ID:}
      email: ${NOTIFICATION_EMAIL_CARD_PBA_TEMPLATE_ID:}
mock:
  callback:
    url:
      endpoint : ${TEST_URL:http://payment-api-aat-staging.service.core-compute-aat.internal}/mock-api/serviceCallback
