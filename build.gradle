buildscript {
  dependencies {
    classpath("net.serenity-bdd:serenity-single-page-report:4.2.13")
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.4.2'
  id 'org.owasp.dependencycheck' version '11.1.1'
  id 'com.github.ben-manes.versions' version '0.51.0'
  id 'net.serenity-bdd.serenity-gradle-plugin' version '4.2.13'
  id 'org.sonarqube' version '6.0.1.5171'
  id 'uk.gov.hmcts.java' version '0.12.63'
  id "info.solidsoft.pitest" version '1.15.0'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

apply from: 'liquibase.gradle'


sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  finalizedBy jacocoTestReport
  jacoco {
    destinationFile = file("${project.rootDir}/build/jacoco/test.exec")
  }
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  include "uk/gov/hmcts/reform/notifications/functional/**"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  enableAssertions = true
  scanForTestClasses = true
}

// Serenity Reporting
functional.finalizedBy(aggregate)

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
  testLogging.showStandardStreams = true
}

checkstyle {
  maxWarnings = 0
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
  checkstyleMain.enabled = true
  checkstyleTest.enabled = true
}


pmd {
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

def sonarExclusions = [
  '**/model/**',
  '**/response/**',
  '**/controllers/**',
  '**/mapper/**',
  '**/config/**'
]

sonarqube {
  properties {
    property "sonar.java.coveragePlugin", "jacoco"
    property "sonar.projectName", "Reform :: notifications-service"
    property "sonar.projectKey", "uk.gov.hmcts.reform:notifications-service"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.outputLocation}"
    property "sonar.host.url", "https://sonarcloud.io/"
    property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec"
    property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
    property "sonar.exclusions", sonarExclusions.join(", ")
    property "sonar.test.exclusions", sonarExclusions.join(", ")
    property "sonar.coverage.exclusions", sonarExclusions.join(", ")
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
  }
}

pmdFunctionalTest.enabled(false);

checkstyleFunctionalTest.enabled(false);

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
//  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

dependencyManagement {
  imports {
    mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2023.0.5'
  }
  dependencies {
    // CVE-2023-3635
    dependencySet(group: 'com.google.guava', version: '33.4.0-jre') {
      entry 'guava'
    }
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

def versions = [
  appinsights     : '3.6.2',
  log4j           : '2.24.3',
  lombok          : '1.18.36',
  reformLogging   : '6.1.8',
  springBoot      : springBoot.class.package.implementationVersion,
  jackson         : '2.18.2',
  restAssured     : '4.5.1',
  serenity        : '4.2.11',
  serenityCucumber: '4.2.16',
  pitest          : '1.9.0',
  sonarPitest     : '0.5'
]


task fortifyScan(type: JavaExec)  {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

dependencies {
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versions.jackson
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: versions.jackson
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson
  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
  implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '3.0.3'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.3.0'
  implementation group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: '4.8.6'
  implementation group: 'com.google.guava', name: 'guava', version: '33.4.0-jre'
  implementation group: 'com.microsoft.azure', name: 'applicationinsights-core', version: versions.appinsights
  implementation group: 'com.microsoft.azure', name: 'applicationinsights-web', version: versions.appinsights
  implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '10.0.1'
  implementation group: 'io.hypersistence', name: 'hypersistence-utils-hibernate-63', version: '3.9.1'
  implementation group: 'jakarta.inject', name: 'jakarta.inject-api', version: '2.0.1'
  implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '8.0'
  implementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.3.1'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: versions.log4j
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: versions.log4j
  implementation group: 'org.liquibase', name: 'liquibase-core', version: '4.30.0'
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.5'
  implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.6.0'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name:'spring-boot-starter-oauth2-client'
  implementation group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '5.2.1-RELEASE'

  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  testImplementation group: 'org.apiguardian', name: 'apiguardian-api', version: '1.1.2'
  testImplementation 'com.github.hmcts:fortify-client:1.4.7:all'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  testImplementation group :'org.projectlombok', name:'lombok', version: versions.lombok
  testAnnotationProcessor group :'org.projectlombok', name:'lombok', version: versions.lombok
  testImplementation group: 'org.testcontainers', name: 'postgresql', version: '1.20.4'

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: '5.5.0'
  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath
  smokeTestImplementation group :'org.projectlombok', name:'lombok', version: versions.lombok
  smokeTestAnnotationProcessor group :'org.projectlombok', name:'lombok', version: versions.lombok

  functionalTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  functionalTestAnnotationProcessor group :'org.projectlombok', name:'lombok', version: versions.lombok
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-cucumber', version: versions.serenityCucumber
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-screenplay', version: versions.serenity
  functionalTestImplementation group: 'org.jboss.aerogear', name: 'aerogear-otp-java', version:'1.0.0'
  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath
}

apply from: "${rootDir}/cve-resolution-strategy.gradle"


application {
  mainClass = 'uk.gov.hmcts.reform.notifications.Application'
}

bootJar {
  archiveFileName = "notifications-service.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'exclude'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

serenity {
  reports = ["single-page-html"]
}

